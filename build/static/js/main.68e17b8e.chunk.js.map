{"version":3,"sources":["Form.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","A","B","C","D","change","e","setState","target","name","value","onSubmit","deleteTodo","preventDefault","props","placeholder","this","Question","className","onChange","onClick","React","Component","header","src","alt","App","fields","console","log","length","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6QA6EiBA,E,4MAzEfC,MAAQ,CAENC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,I,EAGLC,OAAS,SAACC,GACR,EAAKC,SAAL,eACCD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAK5BC,SAAS,SAACL,EAAIM,GACZN,EAAEO,iBACF,EAAKN,SAAS,CAEVN,EAAE,GACFC,EAAE,GACFC,EAAE,GACFC,EAAE,KAGN,EAAKU,MAAMH,SAAS,EAAKX,Q,uDAGlB,IAAD,OACN,OACE,8BACA,2BAEAe,YAAY,YACZL,MAAOM,KAAKhB,MAAMiB,WAEd,6BAAO,6BAEV,wBAAIC,UAAU,UAAd,UACC,2BACCT,KAAO,IACPM,YAAY,KACZL,MAAOM,KAAKhB,MAAMC,EAChBkB,SAAY,SAAAb,GAAC,OAAI,EAAKD,OAAOC,MAEzB,6BAAO,6BAEV,2BACCG,KAAO,IACPM,YAAY,KACbL,MAAOM,KAAKhB,MAAME,EAElBiB,SAAY,SAAAb,GAAC,OAAI,EAAKD,OAAOC,MAC1B,6BAAO,6BAEP,2BACCG,KAAO,IACRM,YAAY,KACZL,MAAOM,KAAKhB,MAAMG,EAClBgB,SAAY,SAAAb,GAAC,OAAI,EAAKD,OAAOC,MAC1B,6BAAO,6BAEP,2BACAG,KAAO,IACPM,YAAY,KACZL,MAAOM,KAAKhB,MAAMI,EAClBe,SAAY,SAAAb,GAAC,OAAI,EAAKD,OAAOC,MAC1B,6BAAO,6BACV,4BAAQc,QAAU,SAAAd,GAAC,OAAI,EAAKK,SAASL,KAArC,mB,GAtEEe,IAAMC,WCAJC,E,uKAGlB,OACC,yBAAKL,UAAW,UACd,wBAAIA,UAAU,UAAd,oCACF,yBAAKM,IAAI,SAASN,UAAU,KAAKO,IAAI,Y,GANLJ,IAAMC,W,gBCwC5BI,E,4MA9BZ1B,MAAM,CACJ2B,OAAO,I,EAGVhB,SAAW,SAACgB,GACV,EAAKpB,SAAS,CAACoB,Y,EAIjBf,WAAa,SAACe,GACZC,QAAQC,IAAIF,EAAOG,S,uDAGZ,IAAD,OAEN,OACA,kBAAC,IAAD,KACA,yBAAKZ,UAAW,6BAEf,kBAAC,EAAD,MACC,wBAAIA,UAAU,YAAd,YACA,kBAAC,EAAD,CAAOP,SAAU,SAAAgB,GAAM,OAAI,EAAKhB,SAASgB,MACzC,2BAAII,KAAKC,UAAUhB,KAAKhB,MAAM2B,OAAQ,KAAK,U,GAvB/BL,aCCEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.68e17b8e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n class Form extends React.Component{\r\n\r\n  state = {\r\n\r\n    A: '',\r\n    B: '',\r\n    C: '',\r\n    D: ''\r\n  };\r\n\r\n  change = (e) => {\r\n    this.setState({\r\n    [e.target.name]: e.target.value\r\n\r\n    });\r\n\r\n  }\r\n  onSubmit=(e , deleteTodo) =>{\r\n    e.preventDefault();\r\n    this.setState({\r\n\r\n        A:'',\r\n        B:'',\r\n        C:'',\r\n        D:''\r\n    });\r\n\r\n    this.props.onSubmit(this.state);\r\n\r\n  };\r\n  render(){\r\n    return(\r\n      <form>\r\n      <input\r\n      //name =\"Question\"\r\n      placeholder=\"Question:\"\r\n      value={this.state.Question}\r\n\r\n       />{<br/>}{<br/>}\r\n\r\n       <h6 className=\"option\">Option</h6>\r\n        <input\r\n         name = \"A\"\r\n         placeholder=\"A:\"\r\n         value={this.state.A}\r\n           onChange = {e => this.change(e)}\r\n\r\n            />{<br/>}{<br/>}\r\n\r\n            <input\r\n             name = \"B\"\r\n             placeholder=\"B:\"\r\n            value={this.state.B}\r\n\r\n            onChange = {e => this.change(e)}\r\n            />{<br/>}{<br/>}\r\n\r\n               <input\r\n                name = \"C\"\r\n               placeholder=\"C:\"\r\n               value={this.state.C}\r\n               onChange = {e => this.change(e)}\r\n               />{<br/>}{<br/>}\r\n\r\n                  <input\r\n                  name = \"D\"\r\n                  placeholder=\"D:\"\r\n                  value={this.state.D}\r\n                  onChange = {e => this.change(e)}\r\n                  />{<br/>}{<br/>}\r\n                  <button onClick={(e => this.onSubmit(e))}>Get Answer</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n  export default Form;\r\n","import React from 'react';\r\n\r\n export default class header extends React.Component{\r\n   \r\n  render(){\r\n    return(\r\n     <div className =\"header\">\r\n       <h6 className=\"center\">WELCOME TO YOUR CHOICE MAKER APP</h6>\r\n     <img src=\"bg.png\" className=\"bg\" alt=\"bg\"/>\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n   );\r\n\r\n   }\r\n  }\r\n","import React, { Component } from 'react';\nimport Form from './Form';\nimport Header from './Header';\nimport './App.css';\nimport { BrowserRouter, Route } from 'react-router-dom'\n\n\n\n\n\n\nclass App extends Component{\n   state={\n     fields:[]\n\n   };\n  onSubmit = (fields) =>{\n    this.setState({fields});\n\n  //  console.log('App comp got:',fields);\n  }\n  deleteTodo = (fields) => {\n    console.log(fields.length);\n  }\n\n  render(){\n\n    return(\n    <BrowserRouter>\n    <div className =\"choicemaker-App container\">\n\n     <Header />\n      <h6 className=\"question\">Question</h6>\n      <Form  onSubmit={fields => this.onSubmit(fields)} />\n      <p>{JSON.stringify(this.state.fields, null,2)}</p>\n\n      </div>\n      </BrowserRouter>\n    );\n  }\n\n}\nexport default App;\n/*\nimport AddTodo from './AddTodo';\n\nclass app extends Component{\n\n  class = {\n    content:''\n  }\n  handleChange = (e) =>{\n    this.setState({\n      content: e.target.value\n    })\n  }\n  handleSubmit = (e) =>{\n    e.preventDefault();\n    console.log(this.state);\n  }\n  render(){\n    return(\n      <div className =\"todo-App container\">\n      <h3 className=\"center green-text\">WELCOME TO YOUR CHOICE MAKER APP</h3>\n      <form onSubmit = {this.handleSubmit}>\n      <label>Add new todo:</label>\n      <input type = \"text\" onChange={this.handleChange} />\n      <label htmlfor =\"password\">passwoed</label>\n      <input type =\"text\"name=\"text\"value={this.handleChange}\n      onChange={this.handleChange}/>\n      </form>\n      </div>\n\n    )\n  }\n}\nexport default app;\n/*\nclass App extends Component {\n\n  state = {\n    todos : [\n     { id:1, content: 'buy some milk'},\n      { id :2, content: 'play mario Kart'}\n   ]\n  }\n\n deleteTodo = (id) => {\n  const todos = this.state.todos.filter(todo => {\n      return todo.id !== id\n    });\n    this.setState({\n      todos\n    })\n  }\n\n  render() {\n    return (\n      <div className =\"todo-App container\">\n<h3 className=\"center green-text\">WELCOME TO YOUR CHOICE MAKER APP</h3>\n<h3 className = \"center blue-text\">Question</h3>\n<Todos todos = {this.state.todos} deleteTodo={this.deleteTodo}/>\n<AddTodo />\n      </div>\n    );\n  }\n}\n*/\n//export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nif (module.hot){\n  module.hot.accept();\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}